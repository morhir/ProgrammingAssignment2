tdf <- data.frame()
tdf
data <- read.csv(list.files("specdata")[1])
setwd(directory)
getwd()
data <- read.csv(list.files()[1])
data[!is.na(sulfate)]
data[]
names(data)
mean(data[id])
mean(data['id'])
data["id"]
data["Date"]
data["ID"]
mean(data["ID"])
data["ID"]
data[!is.na(data)]
data[!is.na(data[names[1]])]
data[!is.na(data[names(data)[1]])]
data[!is.na(data[names(data)[1]]) &!is.na(data[names(data)[1]])]
data[!is.na(data[names(data)[1]]) &!is.na(data[names(data)[1]])&!is.na(data[names(data)[3]])]
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attibutes(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix(nrow = 2, ncol = 2)
my_matrix <- matrix(nrow = 2, ncol = 2)
my_matrix <- matrix(1:10, nrow = 2, ncol = 2)
my_matrix <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix <- matrix(1:20,4, 5)
my_matrix2 <- matrix(1:20,4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating","test")
colname(my_data) <- cnames
colnames(my_data) <- cnames
my_data
data[names(data)[1]]
data[names(data)[1]][!is.na(data[names(data[2])]) & !is.na(data[names(data[3])]) & !is.na(data[names(data[4])])]
length(data[names(data)[1]][!is.na(data[names(data[2])]) & !is.na(data[names(data[3])]) & !is.na(data[names(data[4])])])
length(names(data))
names(data)
z <- rep(TRUE, LENGTH(data))
z <- rep(TRUE, length(data))
dim(data)
z <- rep(TRUE, dim(data)[1])
dim(z)
length(z)
z <- z & !is.na(data["nitrate"])
z[z]
length(z)
length(z[z])
result <- data.frame()
for (i in id){
data <- read.csv(list.files()[i])
goodData <- rep(TRUE, dim(data)[1])
for (colmn in names(data)){
goodData <- goodData & !is.na(data[colmn])
}
tempDataFrame <- data.frame(id = i, nobs = length(goodData[goodData]))
result <- rbind(result, tempDataFrame)
}
complete <- function(directory, id = 1:332) {
title <- c("id", "nobs")
result <- data.frame()
for (i in id){
data <- read.csv(list.files()[i])
goodData <- rep(TRUE, dim(data)[1])
for (colmn in names(data)){
goodData <- goodData & !is.na(data[colmn])
}
tempDataFrame <- data.frame(id = i, nobs = length(goodData[goodData]))
result <- rbind(result, tempDataFrame)
}
}
complete(getwd(), 1:1)
complete <- function(directory, id = 1:332) {
title <- c("id", "nobs")
result <- data.frame()
for (i in id){
data <- read.csv(list.files()[i])
goodData <- rep(TRUE, dim(data)[1])
for (colmn in names(data)){
goodData <- goodData & !is.na(data[colmn])
}
tempDataFrame <- data.frame(id = i, nobs = length(goodData[goodData]))
result <- rbind(result, tempDataFrame)
}
result
}
complete(getwd(), 1:1)
complete(getwd(), 1:4)
submit()
setwd(assignment.dir)
getwd
getwd()
submit()
submit()
submit()
@
?correlation
?summary
summary(data['sulfate'])
cor(1,1)
cor(1:2,1:2)
cor(1:2,1:3)
cor(c(1,1,1),1:3)
cor(data[names(data)[2]],data[names(data)[3]])
cor(data[names(data)[2]][!is.na(data[names(data)[2]])],data[names(data)[3]])[!is.na(data[names(data)[3]])]
cor(data[names(data)[2]][!is.na(data[names(data)[2]]) & !is.na(data[names(data)[3]])],data[names(data)[3]])[!is.na(data[names(data)[2]]) & !is.na(data[names(data)[3]])]
data[names(data)[2]]
data[names(data)[2]][!is.na(data[names(data)[2]]) & !is.na(data[names(data)[3]])]
data
data[names(data)[3]][!is.na(data[names(data)[2]]) & !is.na(data[names(data)[3]])]
?cor
data[names(data)[2]][!is.na(data[names(data)[2]]) & !is.na(data[names(data)[3]])]
dataCOl2 <- data[names(data)[2]][!is.na(data[names(data)[2]]) & !is.na(data[names(data)[3]])]
dataCol3 <- data[names(data)[3]][!is.na(data[names(data)[2]]) & !is.na(data[names(data)[3]])]
cor(dataCOl2, dataCol3)
summary(cor(dataCOl2, dataCol3))
summary(cbind(dataCOl2, dataCol3)
)
source(complete.R)
ggetwd()
getwd()
source("complete.R")
rm(complete)
rm(complete)
source("complete.R")
data <- complete("specdata")
str(data)
data["id"][nobs > 100]
data["id"][data["nobs"] > 100]
data["id"][data["nobs"] > 800]
cbind(1,2)
data[2,"id"]
data[317,"id"]
data[317,]
data[1:,]
data[1:100,]
data[data["nobs"] > 800]
data[][data["nobs"] > 800]
data[,][data["nobs"] > 800]
data[1:100,][data["nobs"] > 800]
data[1:100,"nobs"][data["nobs"] > 800]
data["nobs"][data["nobs"] > 800]
goodData <- data["id"][data["nobs"] > 800]
data[data["id"] == goodData]
identical(1:4, 1:5)
data[data["id"]]
data["id"] == goodData
data["nobs"] > 800
goodData <- data["nobs"] > 800
length(data["id"][goodData])
c(c(1,2), 1)
source("complete.R")
source("corr.R")
corr(directory, 800)
str(orr(directory, 800))
str(corr(directory, 800))
q
source("corr.R")
str(corr(directory, 800))
files <- complete(directory)
goodFiles <- files["id"][files["nobs"] > threshold]
goodFiles <- files["id"][files["nobs"] > 800]
goodFiles
data <- read.csv(list.files("specdata", full.names = TRUE)[3])
data <- read.csv(list.files("specdata", full.names = TRUE)[17])
data
goodData <- rep(TRUE, dim(data)[1])
for (colmn in names(data)){
goodData <- goodData & !is.na(data[colmn])
}
length(goodData[goodData])
files
goodFiles
files[17]
files[17,]
length(goodData[goodData])
correl <- cor(data[names(data)[2]][goodData], data[names(data)[3]][goodData])
correl
p <- c(p,1)
p = 2
p <- c(p,1)
p <- c(p,1)
p <- c(p,1)
p <- c(p,1)
p <- c(p,1)
p
p <- number(0)
p <- Null
p <- NULL
P
p
p <-numberic(0)
p <-numeric(0)
p
p <- c(p,1)
p
source("corr.R")
source("complete.R")
summary(corr(dir))
summary(corr(directory, 800))
submit()
submit()
submit()
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
play()
6 = 7
nxt()
6 < 7
10 <= 10
5 != 7
NOT 5 == 7
NOT (5 == 7)
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, TRUE, TRUE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical("twins", "twins")
xor (5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
ints(which(ints > 7))
which(ints > 7)
any(ints)
any(ints < 0)
all(ints > 0)
View(install_course_google_drive)
View(install_course_github)
View(install_course_directory)
View(install_course_google_drive)
View(install_course_zip)
View(install_from_swirl)
View(is_robust_match)
View(is_robust_match)
View(main)
View(main)
View(nxt)
View(play)
View(rmatch_calls)
View(skip)
View(submit)
View(swirl)
View(uninstall_all_courses)
View(uninstall_course)
View(zip_course)
View(bye)
clear()
library(datasets)
data(iris)
?iris
str(iris)
iris["virginica"]
iris["Sepal.Length"]
lapply(iris, mean)
x <- 1:4
lapply(x, runif)
lapply(x, runif, min = 0, max = 10)
str(iris)
apply(iris, $Species, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris, 3, mean)
apply(iris, 4, mean)
apply(iris, 5, mean)
?apply
?factor
is.factor(iris)
levels(iris)
iris$setosa
iris$Species
iris[, virginica = TRUE]
(ff <- factor(substring("statistics", 1:10, 1:10), levels = letters))
ff[, drop = TRUE]
factor(letters[7:10])[2:3, drop = TRUE]
colMeans(iris)
head(iris[])
head(iris$Species)
head(iris$Species = "virginica")
head(iris$Species == "virginica")
head(iris[iris$Species == "virginica"])
head(iris$SepalLength[iris$Species == "virginica"])
head(iris$Sepal.Length[iris$Species == "virginica"])
mean(iris$Sepal.Length[iris$Species == "virginica"])
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
str(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(iris$)
tapply(iris$Sepal.Length, iris$Species, mean)
with(iris, tapply(Sepal.Length, Species, mean))
tapply(iris$Sepal.Length, iris$Species, mean, simplify = FALSE)
with(iris, tapply(Sepal.Length, Species, range))
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)[4]
tapply(mtcars$hp, mtcars$cyl, mean)$4
type(tapply(mtcars$hp, mtcars$cyl, mean))
is.array(tapply(mtcars$hp, mtcars$cyl, mean))
(tapply(mtcars$hp, mtcars$cyl, mean))[1]
x <- tapply(mtcars$hp, mtcars$cyl, mean))
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x[names(x) = 4]
x[names(x) == 4]
x[names(x) == 4] - x[names(x) == 8]
abs(x[names(x) == 4] - x[names(x) == 8])
split(iris, "species")
split(iris, "virginica")
split(iris, Spicies)
split(iris, Species)
split(iris, iris$Species)
split(iris, iris$Species)$virginica
mean(split(iris, iris$Species)$virginica$Sepal.Length)
debug(ls)
ls
ls(cur)
q
q
z
d
b
ls
ls()
log(-1)
?debug
undebug(ls)
undebug(ls)
undebug()
lm(yy - xx)
traceback()
xx
traceback()
debug(lm)
lm(yy - xx)
lm(yy - xx)
e
undebur(lm)
undebug(lm)
options(error = recover)
read.csv("nosuchfile")
ma <- matrix(1:4, 2, 2)
ma
solve(ma)
ma * solve(ma)
?matrix
?%*%
ma %*% solve(ma)
ma <- matrix(1:6, 2, 3)
solve(ma)
options
options()
options$error
options$error()
options(error = TRUE)
option(error)
?recover
option(error = recvoer)
option(error = recovoer)
option(error = recover)
options(error = recover)
option(error = recover)
option(error != recover)
options(error != recover)
options(error = recover)
?recover
?options
getOption(error)
getOption(1)
0
getOption("error")
option(error = stop)
options(error = stop)
option(error = stop)
log(-1)
source(cachematrix.R)
source("cachematrix.R")
getwd()
setwd(/)
setwd("C:/Documents and Settings/kleaa/Мои документы/repos/jhu-r-programming")
setwd("week3")
setwd("ProgrammingAssignment2/")
source("cachematrix.R")
ma
ma <- matrix (1:9, 3, 3)
ma
cacheSolve((ma))
cacheSolve(ma)
cacheSolve(makeCacheMatrix(ma)
)
source("cachematrix.R")
cacheSolve(makeCacheMatrix(ma))
traceback()
makeCacheMatrix(ma)
cacheSolve(ma)
cacheSolve(ma)
makeCacheMatrix(ma)$get
makeCacheMatrix(ma)$get()
debug(cacheSolve)
mad <- makeCacheMatrix(ma)
cacheSolve(mad)
source("cachematrix.R")
cacheSolve(mad)
debug(cacheSolve)
cacheSolve(mad)
View(data)
ma
source("cachematrix.R")
cacheSolve(mad)
solve(ma)
ma
wrapup(ma)
ma <- matrix(1:16, 4, 4)
solve(ma)
ma <- matrix(sample(16), 4, 4)
ma
solve(ma)
cacheSolve(makeCacheMatrix(ma))
cacheSolve(makeCacheMatrix(ma))
ma <- matrix(sample(1), 100,100)
dim(ma)
cacheSolve(makeCacheMatrix(ma))
ma <- matrix(sample(10), 100,100)
dim(ma)
ma <- matrix(sample(10), 100,100)
cacheSolve(makeCacheMatrix(ma))
ma
ma <- matrix(sample(10000), 100,100)
mas <- solve(ma)
cacheSolve(makeCacheMatrix(ma))
mast <- cacheSolve(makeCacheMatrix(ma))
mast <- cacheSolve(makeCacheMatrix(ma))
ma <- matrix(1:4, 2, 2)
mast <- cacheSolve(makeCacheMatrix(ma))
mst
dim(mast)
ma <- matrix(sample(10000), 100, 100)
dim(solve(ma))
mas < makeCacheMatrix(ma)
mas <- makeCacheMatrix(ma)
dim(mas)
str(mas)
makeCacheMatrix(ma)$set()
makeCacheMatrix$set(ma)
makeCacheMatrix()$set(ma)
s <<- solve
s
ma
q
q
mas
mas$setsolve
mas$setsolve(1)
mas$setsolve(matrix(1:4, 2, 2))
mas$getsolve()
source("cachematrix.R")
mat <- makeCacheMatrix(matrix(1:4, 2, 2))
mat
mat$getsolve()
mat$get()
mat$getsolve()
mat$setsolve()
mat$setsolve(matrix(4:1, 2, 2))
mat$getsolve()
mat$set(matrix(4:1, 2, 2))
cacheSolve(mat)
source("cachematrix.R")
mat$set(matrix(4:1, 2, 2))
cacheSolve(mat)
source("cachematrix.R")
mat$set(matrix(sample(100), 10, 10))
cacheSolve(mat)
dim(ma)
ma %*% cacheSolve(mat)
mast <- cacheSolve(mat)
ms %*% mast
ma %*% mast
ma * mast
dim(ma)
dim(mast)
ma <- matrix(sample(100), 10, 10)
mat <- makeCacheMatrix(ma)
ma %*% cacheSolve(mat)
source("cachematrix.R")
mat <- makeCacheMatrix(ma)
cacheSolve(mat)
